INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('linear_regression_forecaster', (select id from ml_task_type where name='forecasting'),'The Linear Regression forecaster from the darts library is a statistical method used to predict a dependent variable (target) based on the values of independent variables (features). The model assumes a linear relationship between the input variables and the output. The model''s strength lies in its simplicity and interpretability. It can be used to understand the impact of several independent variables on the outcome of a dependent variable. Linear Regression is widely used in various fields, including economics, computer science, and the social sciences.', 'Linear Regression Forecaster', (select id from model_structure_type where name='base'), '{Simplicity: Linear Regression is straightforward to understand and explain, making it a good model for beginners.,Interpretability: Each feature used in the model gets its own coefficient which tells its importance in the prediction.,Speed: Linear Regression is computationally inexpensive compared to more complex models and hence, is useful for large datasets.}', '{Assumptions: Linear Regression assumes a linear relationship between features and target variable, which is not always the case.,Outliers: The model is sensitive to outliers which can have a large influence on the line of best fit.,Overfitting: With many features, the model can become complex and may overfit the training data, resulting in poor performance on unseen data.}', true, (select id from model_ensemble_type where name='null'),(select id from model_family_type where name='null'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('lags', 'Lags', 'The number of lagged observations of the target series to use as input features.', false, false, 1, (select id from Model where name='linear_regression_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('lags_past_covariates', 'Last Past Covariates', 'The number of lagged past covariates to use as input features.', false, false, 2, (select id from Model where name='linear_regression_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('output_chunk_length', 'Output Chunk Length', 'Specifies the number of time steps forecasted at once, with these forecasts then used as input for generating the next set of predictions in an autoregressive manner when forecasting over long horizons.', false, false, 3, (select id from Model where name='linear_regression_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('fit_intercept', 'Fit Intercept', 'Whether or not to fit the intercept term.', false, false, 4, (select id from Model where name='linear_regression_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='linear_regression_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='linear_regression_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='lags' and model_id=(select id from model where name='linear_regression_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='lags_past_covariates' and model_id=(select id from model where name='linear_regression_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='output_chunk_length' and model_id=(select id from model where name='linear_regression_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='fit_intercept' and model_id=(select id from model where name='linear_regression_forecaster')), (select id from parameter_type where name='boolean'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='lags' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 5);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='lags' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 13);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='lags_past_covariates' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 5);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='lags_past_covariates' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 13);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='output_chunk_length' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 5);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='output_chunk_length' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 21);
INSERT INTO boolean_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='fit_intercept' and model_id=(select id from model where name='linear_regression_forecaster') and parameter_type_id=(select id from parameter_type where name='boolean'))), true);
INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('naive_last_forecaster', (select id from ml_task_type where name='forecasting'),'The naive last value forecaster provides a baseline forecast by predicting future values using the previous values. A seasonal offset can be included.', 'Naive Forecaster: Last Value', (select id from model_structure_type where name='base'), '{Can be used as a benchmark.,Fast training time.,Easy to understand and interpret.}', '{Does not make use of exogenous features.,Does not look for any correlations or relationships in the data.}', true, (select id from model_ensemble_type where name='none'),(select id from model_family_type where name='linear'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='naive_last_forecaster'),(select id from model_group_type where name='fast'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='naive_last_forecaster'),(select id from model_group_type where name='explainable'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('sp', 'Seasonal periodicity.', 'The number steps in the series which make up one seasonal cycle.', true, false, 1, (select id from Model where name='naive_last_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='naive_last_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='naive_last_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='sp' and model_id=(select id from model where name='naive_last_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='naive_last_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='naive_last_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 13);
INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('auto_ets_forecaster', (select id from ml_task_type where name='forecasting'),'ETS (Error, Trend, Seasonality) forecasting is a method of time series forecasting that decomposes a time series into three components:

Error: represents the random fluctuations or noise in the data, which cannot be explained by the trend or seasonality.

Trend: represents the overall direction (upward or downward) of the time series

Seasonality: represents the periodic fluctuations in the time series (e.g. monthly, quarterly, annually)

There are several variations of the ETS forecasting method, including ETS(A,N,N) (additive error, no trend, no seasonality), ETS(M,N,N) (multiplicative error, no trend, no seasonality), and ETS(A,A,N) (additive error and trend, no seasonality). These variations are used depending on the characteristics of the time series data. 

The <a href="https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.ets.AutoETS.html" target="_blank">AutoETS</a> model automatically chooses these hyperparameters including also damping of trend, and transformation of the data, among other things, by using the <a href="https://en.wikipedia.org/wiki/Akaike_information_criterion" target="_blank">Akaike Information Criterion (AIC)</a>. If you know the seasonality of your data, please fix it to the desired value, otherwise, make it tunable. Note by default the model assumes no seasonality in the data. For example, if you make the model tunable, it may determine that a time series of monthly sales data has a linear trend, a quarterly seasonality, and a Gaussian error term, and use these hyperparameters to generate forecasts.', 'Auto ETS', (select id from model_structure_type where name='base'), '{Robust,Widely used,Explainable,May produce forecasts from noisy data}', '{Forecasts lag behind the actual trend}', true, (select id from model_ensemble_type where name='none'),(select id from model_family_type where name='linear'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='auto_ets_forecaster'),(select id from model_group_type where name='fast'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='auto_ets_forecaster'),(select id from model_group_type where name='explainable'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='auto_ets_forecaster'),(select id from model_group_type where name='advanced'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('sp', 'Seasonal Period', 'The number of time steps in a complete cycle.', false, false, 1, (select id from Model where name='auto_ets_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='auto_ets_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='auto_ets_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='sp' and model_id=(select id from model where name='auto_ets_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='auto_ets_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='auto_ets_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 53);
INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('naive_drift_forecaster', (select id from ml_task_type where name='forecasting'),'The naive drift forecaster provides a baseline forecast by predicting future values using the trend over a window of previous values.', 'Naive Forecaster: Drift', (select id from model_structure_type where name='base'), '{Can be used as a benchmark.,Fast training time.,Easy to understand and interpret.}', '{Does not make use of exogenous features.,Does not look for any correlations or relationships in the data.}', true, (select id from model_ensemble_type where name='none'),(select id from model_family_type where name='linear'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='naive_drift_forecaster'),(select id from model_group_type where name='fast'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='naive_drift_forecaster'),(select id from model_group_type where name='explainable'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('window_length', 'Window length', 'The size of the window over which to calculate a rolling mean.', true, false, 1, (select id from Model where name='naive_drift_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='naive_drift_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='naive_drift_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='window_length' and model_id=(select id from model where name='naive_drift_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='window_length' and model_id=(select id from model where name='naive_drift_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 10);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='window_length' and model_id=(select id from model where name='naive_drift_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 21);
INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('auto_arima_forecaster', (select id from ml_task_type where name='forecasting'),'Auto SARIMAX is a machine learning model that can be used to automatically fit a Seasonal Autoregressive Integrated Moving Average with Exogenous Regressors (SARIMAX) model to a time series. It is a variant of the SARIMAX model that uses an automated process to search for the optimal values of the model parameters, rather than requiring the user to specify these values manually.

Auto SARIMAX is often used when there is a need to quickly fit a SARIMAX model to a time series data set without extensive manual parameter tuning. It can be especially useful when working with large data sets or when there is limited time available to optimize the model parameters.

One of the main advantages of Auto SARIMAX is that it can significantly reduce the amount of time and effort required to fit a SARIMAX model to a time series data set.', 'Auto SARIMAX', (select id from model_structure_type where name='base'), '{Automatically finds model parameters.,Can handle non-stationary data. They can account for trends and seasonality in the data.,Widely used and well-established, so there is a wide body of resources available for understanding and using these models.,Simple and easy to implement.}', '{Can require significant computational resources to fit.,May not always find the optimal model parameters.}', true, (select id from model_ensemble_type where name='none'),(select id from model_family_type where name='linear'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='auto_arima_forecaster'),(select id from model_group_type where name='fast'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='auto_arima_forecaster'),(select id from model_group_type where name='explainable'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='auto_arima_forecaster'),(select id from model_group_type where name='advanced'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('information_criterion', 'Information Criterion', 'The information criterion used to find the best SARIMAX model.', false, false, 1, (select id from Model where name='auto_arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('sp', 'Seasonal Period', 'The number of time steps in a complete seasonal cycle.', false, false, 2, (select id from Model where name='auto_arima_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='auto_arima_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='auto_arima_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='information_criterion' and model_id=(select id from model where name='auto_arima_forecaster')), (select id from parameter_type where name='categorical'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='sp' and model_id=(select id from model where name='auto_arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO categorical_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='information_criterion' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='categorical'))), 'aic');
INSERT INTO categorical_parameter_value(parameter_type_definition_id, value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='information_criterion' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='categorical'))), 'hqic');
INSERT INTO categorical_parameter_value(parameter_type_definition_id, value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='information_criterion' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='categorical'))), 'aic');
INSERT INTO categorical_parameter_value(parameter_type_definition_id, value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='information_criterion' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='categorical'))), 'bic');
INSERT INTO categorical_parameter_value(parameter_type_definition_id, value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='information_criterion' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='categorical'))), 'oob');
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='auto_arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 13);
INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('naive_mean_forecaster', (select id from ml_task_type where name='forecasting'),'The naive rolling mean forecaster provides a baseline forecast by predicting future values using a rolling mean of past values.', 'Naive Forecaster: Rolling Mean', (select id from model_structure_type where name='base'), '{Can be used as a benchmark.,Fast training time.,Easy to understand and interpret.}', '{Does not make use of exogenous features.,Does not take into account seasonality.,Does not look for any correlations or relationships in the data.}', true, (select id from model_ensemble_type where name='none'),(select id from model_family_type where name='linear'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='naive_mean_forecaster'),(select id from model_group_type where name='fast'));
INSERT INTO rel_model__groups(model_id, group_id) VALUES ((select id from Model where name='naive_mean_forecaster'),(select id from model_group_type where name='explainable'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('window_length', 'Window length', 'The size of the window over which to calculate a rolling mean.', true, false, 1, (select id from Model where name='naive_mean_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='naive_mean_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='naive_mean_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='window_length' and model_id=(select id from model where name='naive_mean_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='window_length' and model_id=(select id from model where name='naive_mean_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 10);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='window_length' and model_id=(select id from model where name='naive_mean_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 21);
INSERT INTO model(name, ml_task_id, description, display_name, structure_id, advantages, disadvantages, enabled, ensemble_type_id, family_type_id, decision_tree, model_type_id) VALUES ('arima_forecaster', (select id from ml_task_type where name='forecasting'),'The Seasonal Autoregressive Integrated Moving Average with Exogenous Regressors (SARIMAX) model is a statistical model that can be used to analyze and forecast time series data that exhibits seasonal patterns and includes exogenous variables (variables that are not part of the time series we are forecasting).

A SARIMAX model is specified by seven parameters: p, d, q, P, D, Q and m. The p, d, and q parameters specify the order of the autoregressive term, the degree of differencing, and the order of the moving average term, respectively. The P, D, and Q parameters are similar, but are used to model the seasonal patterns in the data. Finally m specifies the number of time steps in a seasonal period.

In addition to these parameters, a SARIMAX model also includes one or more exogenous variables that are used to model the effects of external factors on the time series.', 'SARIMAX', (select id from model_structure_type where name='base'), '{Can handle non-stationary data. They can account for trends and seasonality in the data.,Widely used and well-established, so there is a wide body of resources available for understanding and using these models.,Simple and easy to implement.}', '{Can require significant computational resources to fit.}', true, (select id from model_ensemble_type where name='none'),(select id from model_family_type where name='linear'), false, (select id from model_type where name='Forecasting Model'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('D', 'D', 'The degree of seasonal differencing.', false, false, 1, (select id from Model where name='arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('P', 'P', 'The order of the seasonal autoregressive term.', false, false, 2, (select id from Model where name='arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('Q', 'Q', 'The order of the seasonal moving average term.', false, false, 3, (select id from Model where name='arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('d', 'd', 'The degree of differencing.', false, false, 4, (select id from Model where name='arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('p', 'p', 'The order of the autoregressive term.', false, false, 5, (select id from Model where name='arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('q', 'q', 'The order of the moving average term.', false, false, 6, (select id from Model where name='arima_forecaster'));
INSERT INTO parameter(name, label, description, enabled, fixed_value, ordering, model_id) VALUES ('sp', 'Seasonal Period', 'The number of time steps in a complete seasonal cycle.', false, false, 7, (select id from Model where name='arima_forecaster'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='arima_forecaster'), (select id from metric where name='classification-log-loss'));
INSERT INTO rel_model__incompatible_metrics(model_id, metric_id) VALUES ((select id from model where name='arima_forecaster'), (select id from metric where name='classification-roc'));
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='D' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='P' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='Q' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='d' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='p' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='q' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO parameter_type_definition(parameter_id, parameter_type_id, parameter_distribution_type_id, ordering) VALUES ((select id from parameter where name='sp' and model_id=(select id from model where name='arima_forecaster')), (select id from parameter_type where name='integer'), (select id from parameter_distribution_type where name='uniform'), 0);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='D' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='D' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0, 2);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='P' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='P' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0, 3);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='Q' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='Q' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0, 3);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='d' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='d' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0, 3);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='p' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='p' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0, 6);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='q' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='q' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 0, 6);
INSERT INTO integer_parameter(parameter_type_definition_id, default_value) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1);
INSERT INTO integer_parameter_value(parameter_type_definition_id, lower, upper) VALUES ((select id from parameter_type_definition where parameter_id=(select id from parameter where name='sp' and model_id=(select id from model where name='arima_forecaster') and parameter_type_id=(select id from parameter_type where name='integer'))), 1, 13);
